AMBIORE (Applications for MCMC Bayesian Inference Of Rates in Evolution)

http://www.phrap.org
Author: Dick Hwang, dhwang@u.washington.edu


AMBIORE is a collection of programs for estimating context-dependent
substitution rates along a phylogeny using a computationally efficient
Bayesian Markov chain Monte Carlo (MCMC) approach.

The programs run on the command line.  A Makefile is included for
compiling under Unix/Linux.  Compilation under Windows or MacOS has
not been tested, but should be possible with perhaps some minor edits
to the random number routines in utility.c.  At least 1 GB of RAM and
several GBs of free hard drive space are recommended.

This is the first public release of this software, and it has mainly
been tested on the datasets and the options that I commonly use.  Let
me know (Dick Hwang, dhwang@u.washington.edu) if any issues appear or
if the documentation is not clear.  I plan to expand this
documentation based on user feedback.

Copyright Notice:

The following copyright notice covers all source code, documentation,
and example files in the AMBIORE package.

(C) Copyright 2004.  University of Washington and Dick Hwang.  All
rights reserved. Permission is granted to reproduce, perform, and
modify these programs and documentation files.  Permission is granted
to distribute or provide access to these programs provided that this
copyright notice is not removed, the programs are not integrated with
or called by any product or service that generates revenue, and that
your distribution of these materials program are free.  Any modified
versions of these materials that are distributed or accessible shall
indicate that they are based on these program.


Description of Individual Programs:

ambiore - Given the model, a set of aligned sequences, and a tree
topology relating the sequences, this program generates the MCMC
samples, outputting a set of very large files.

branch_sum, mutation_sum, root_sum - Given MCMC samples generated by
ambiore, these programs estimate branch lengths, substitution rates,
and root distribution parameters with confidence intervals

evolve - This program generates a set of aligned sequences by
simulating evolution along a tree.

parsimony - Given a set of aligned sequences, this program finds a
minimal set of changes that can give rise to the sequences and outputs
the counts of each type of change with their neighboring-nucleotide
contexts.

trinuc_freqs - Given the output of parsimony, this program estimates
context-dependent substitution rates.  Although a poor estimate, these
estimates can be used as seed values for sampling in ambiore.

markov2_transitions - Estimates transition probabilities from a set of
sequences modeled as 2nd order Markov chains

rescale_tree - Rescales the branch units in a tree file in Newick
format

Installation:

A Makefile is included for compiling the programs under Unix/Linux.
For operating systems other than Linux, editing some of the
compilation options in the Makefile may be required.  See the comments
in the Makefile for details.

To compile all the programs, type:

  make all

To compile and install all the programs, type:

  make install

Unless the EXEDIR directory has been edited in the Makefile, the
programs will be installed in the ../bin directory relative to the
source directory.  Feel free to move the programs to a convenient
location, e.g., somewhere in the system path.


Input File Formats:

The file representing the sequence alignment should be a format
similar to the "sequential" PHYLIP format.  The first line should
contain two numbers separated by whitespace: the number of species and
the number of alignment columns.  Each following line should contain a
species name (with no whitespace), whitespace, and then the entire DNA
sequence.  The DNA sequence may contain the characters 'T', 'C', 'A',
and 'G', as well as 'N' for unknown bases and '-' for gaps.

Here is an imaginary example:

3  20
human    ATCGG--CTTAGAAATCTGNNNCAGTAGCCTTCATCCAGT
mouse    CTCGGG-CTTAGTAATCTGCGGCAGTAGCTT--TTCCAGA
cat      CTCAGGGCTTAGAAATCTGC-CCAGTCGCTTTCATCGGGT

The tree file should represent a rooted tree in the Newick format and
include initial estimates of branch lengths.  For a description of
this format, see
http://evolution.gs.washington.edu/phylip/newicktree.html.

For example (again imaginary),

((human:0.334,mouse,0.723):0.103,cat:0.529);


Getting Started:

Here we'll assume that the programs are in the system path and
 that we have a file named "seqfile" which contains the sequence
alignment.  First, we need initial estimates of the branch lengths.
We can use DNAML from the PHYLIP package; PAML, PAUP, or any other
program that can estimate branch lengths should work as well.  The
estimates need not be very accurate since the MCMC sampling will
produce better estimates of the branch lengths; however, the topology
given will be assumed during the sampling, so make sure the topology
generated is as desired or modify the topology accordingly.

This will generate a file (we assume named "outtree") in Newick format
with branch length units given in substitutions per site.  For the
purposes of the analysis, we would like the probability of
substitution to be small per branch length unit.  So we rescale the
tree by, say, a factor of 200 to produce a new file "treefile":

   rescale_tree 200 outtree > treefile

We can use parsimony to get a rough count of the number of changes on
each branch:

   parsimony seqfile treefile > changes_count

Then we estimate context-dependent substitution rates (both symmetric
and asymmetric) from these counts:

   trinuc_freqs changes_count > symmetric_mutation_rates
   trinuc_freqs -asymmetry changes_count > asymmetric_mutation_rates

Note that these estimated rates need not be very accurate (and they
probably won't be).  But their only purpose is to serve as initial
values for the MCMC sampling, which should be reasonably robust to
starting values.

We also need initial estimates for the transition parameters for the
second order Markov chain modeling the root and inserted sequences:

   markov2_transitions seqfile > root_transitions

Now we're just about ready to begin generating MCMC samples.  We need
a directory to store the output files containing the MCMC samples:

   mkdir mcmc_output

Then we can begin the sampling:

   ambiore -out mcmc_output/ seqfile treefile default_rate_categories default_root_categories

Here, "default_rate_categories" and "default_root_categories" are
files indicating that all sequence and tree positions have the same
substitution rate and root/inserted sequence distribution.  These
files can be found in the "example_files" directory of this
distribution.

After a few hours to a few days (depending on the size of the
alignment), the sampling with finish and there will be a few large
files in the output directory.  By default (for sequences longer than
10,000bp), 50,000 samples will have been generated.

   cd mcmc_output
   branch_sum 50000 ../treefile mcmc.mutationtype_00.branch > mcmc.mutationtype_00.branch.treefile
   mutation_sum 50000 mcmc.default.sym.mutation > mcmc.default.sym.mutation.sum
   root_sum 50000 mcmc.default.root > mcmc.default.root.sum

Now the files mcmc.branch.treefile, mcmc.mutation.sum, and
mcmc.root.sum will contain estimates of the branch lengths,
context-dependent mutation rates, and root distribution parameters
along with 95% confidence intervals.


Common options:

Running ambiore without any commandline parameters or with incorrect
parameters prints out the list commandline options.  In practice, the
useful ones are:

-out path         Output path for mcmc sample files.  Generally should 
                  be a directory designation ending with "/".  The
                  directory must exist.  If this is omitted, the 
                  output files will end up in the current directory.

-samples #        Collect # samples.  By default, # = 50,000 for 
                  sequences > 10,000bp; for sequences <= 10,000bp, 
                  # = 1000.  This should be plenty and may be more
                  than enough.  Running time is directly proportional
                  to the number of samples generated.

-rate #.#         Rate of sample collection.  By default, #.# = 0.01,
                  and a sample is collected every 100th missing data
                  update.  For shorter sequences, this rate may be 
                  increased.  For alignments <= 10,000 bp in
                  length, #.# is automatically set to 1.0.  Running
                  time is directly proportional to the sampling
                  rate.

-map file         If the files specifying rate categories and root
                  categories are indexed according to annotations 
                  in a reference sequence before alignment, for
                  example, the indexing may no longer correspond
                  to positions in the alignment.  This option allows
                  specifying a file that provides a translation of
                  the indexing.  The file should contain a list of
                  n integers (separated by whitespace or carriage 
                  returns), where n is the length of the reference
                  sequence.  The ith integer represents the 
                  alignment position (counted starting from 0) of 
                  the ith base in the reference sequence.  If the 
                  ith base of the reference sequence is not present 
                  in the alignment, then the ith integer should be 
                  -1.

-mutation_types # file   Use # branch scaling factors to represent
                         # substitution types (see paper) as 
                         specified in file.  The file has 96 lines
                         for symmetric substitutions followed by 
                         192 lines for asymmetry substitutions.  
                         Each line specifies the name of the
                         substitution followed by the number of the
                         substitution type (numbered starting with 0).
                         See "example_files/mutation_types.14" for
                         an example of the type specification used
                         in the paper.  Note that the ordering
                         of lines should be the same as in the
                         example file.


Format of Category Files:

The rate category files specifies different categories of substitution
rates depending on tree position and sequence position.  The root
category files specifies the different categories of root and inserted
sequence distributions depending on tree position and sequence
position.  The format is somewhat complicated and is best described by
example.  Please see the "*.readme" files in the example_files
directory.

If multiple rate or root categories are defined, then one output file
will be generated for each category.  Likewise, if multiple
substitution types are used, then multiple files of the form
"mcmc.mutationtype_??.branch" will be generated, each corresponding to
a substitution type.


Simulating Sequence:

Suppose we used the following command to generate MCMC samples:

   ambiore -out mcmc_output/ -mutation_types 42 mutation_types.42 \
      -map mapfile seqfile treefile rate_categories root_categories

We then found the mean and confidence intervals of the parameter
distributions (assuming we're running csh or tcsh as the shell):

   cd mcmc_output

   foreach file (mcmc.mutationtype*.branch) 
      branch_sum -list 50000 ../treefile $file > $file.list
   end
   
   foreach file (mcmc.*.sym.mutation)
     mutation_sum 50000 $file > $file.sum
   end

   foreach file (mcmc.*.asym.mutation)
     mutation_sum -asymmetry 50000 $file > $file.sum
   end

   foreach file (mcmc.*.root)
     root_sum 50000 $file > $file.sum
   end

Now we would like to simulate sequence evolution and produce an
alignment based on this model and the estimated parameters.  First, we
make copies of the "rate_categories" and "root_categories" files:

   cp ../rate_categories ../root_categories .

Then we edit the files and replace the names of the files containing
the initial estimates with the names of the files containing the
estimated just found using MCMC.  Now we run the evolve program to
generate a new alignment, assuming the same tree topology and history
of indels as assumed in the original alignment:

   mkdir simulated
   evolve -map ../mapfile -mutation_types 42 ../mutation_types.42 \
     ../seqfile ../treefile rate_categories root_categories > \
     simulated/seqfile.unmasked

There is a "feature" in this version of the evolve program that
requires that the species be listed in the same order in "seqfile" as
in "treefile".  It suffices to reorder the lines in "seqfile"
accordingly.

The newly created file "seqfile.unmasked" now contains the same number
of sequences of the same length as in "seqfile."  However, to ensure
the same amount of information, we need to change bases in the new
file to N's where they occur in the original file:

   cd simulated
   mask seqfile.unmasked ../../seqfile > seqfile

Now "mcmc_output/simulated/seqfile" contains the same amount of
sequence information as "seqfile" but with known evolutionary
parameter values.  We can repeat the process of estimating parameters
using ambiore on the simulated sequences.  Then we may compare the
estimates in "mcmc_output" (the true parameter values for the
simulated data) with those in
"mcmc_output/simulated/seqfile/mcmc_output" (the estimated values from
the simulated data).  If the analysis is working, we expect that the
difference between these values should be approximately normally
distributed with variance given by the estimated variances (which
would be the 95% confidence interval values given in
"mcmc_output/simulated/seqfile/mcmc_output" files, divided by 1.96,
and squared).

